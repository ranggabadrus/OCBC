// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Dashboard Page  from dashboard go to transfer page 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "position": "absolute",
        "top": 0,
      }
    }
  >
    <RNSVGSvgView
      bbHeight={500}
      bbWidth={750}
      focusable={false}
      height={500}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Object {
            "flex": 0,
            "height": 500,
            "width": 750,
          },
        ]
      }
      width={750}
    >
      <RNSVGGroup>
        <RNSVGCircle
          cx={-50}
          cy={-300}
          fill={4278190208}
          propList={
            Array [
              "fill",
              "stroke",
              "strokeWidth",
            ]
          }
          r={500}
          stroke={4278190208}
          strokeWidth="2"
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
  <View
    collapsable={false}
    style={
      Object {
        "alignSelf": "flex-end",
        "backgroundColor": "#f2f2f2",
        "margin": 10,
        "transform": Array [
          Object {
            "translateX": [MockFunction],
          },
        ],
      }
    }
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "flexDirection": "row",
          "opacity": 1,
        }
      }
    >
      <Text
        allowFontScaling={false}
        selectable={false}
        style={
          Array [
            Object {
              "color": "gray",
              "fontSize": 24,
            },
            undefined,
            Object {
              "fontFamily": "Material Design Icons",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        ó°—½
      </Text>
      <View
        accessible={true}
        collapsable={false}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "marginLeft": 5,
            "opacity": 1,
          }
        }
      >
        <Text>
          Logout
        </Text>
      </View>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "alignSelf": "flex-start",
          "backgroundColor": "#fff",
          "borderBottomEndRadius": 50,
          "borderColor": "navy",
          "borderTopEndRadius": 50,
          "borderWidth": 2,
          "elevation": 20,
          "opacity": 0.9,
          "padding": 20,
          "width": 600,
        },
      ]
    }
  >
    <Text
      style={
        Object {
          "color": "#000",
          "fontSize": 20,
          "fontWeight": "bold",
        }
      }
      testID="money"
    >
      You have
    </Text>
    <Text
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 30,
            "fontWeight": "bold",
          },
        ]
      }
    >
      SGD$
      <Text
        testID="balance"
      >
        111,111.00
      </Text>
    </Text>
    <Text>
      Account No
    </Text>
    <Text
      style={
        Object {
          "color": "#000",
          "fontSize": 20,
          "fontWeight": "bold",
        }
      }
      testID="accountNo"
    >
      12345
    </Text>
    <Text>
      Account Holder
    </Text>
    <Text
      style={
        Object {
          "color": "#000",
          "fontSize": 20,
          "fontWeight": "bold",
        }
      }
    >
      
    </Text>
  </View>
  <View
    style={
      Object {
        "flex": 1,
        "justifyContent": "center",
        "margin": 20,
      }
    }
  >
    <Text
      style={
        Array [
          Object {
            "color": "#000",
            "fontSize": 20,
            "fontWeight": "bold",
          },
          Object {
            "marginBottom": 10,
          },
        ]
      }
    >
      Your transaction history
    </Text>
    <RCTScrollView
      contentContainerStyle={
        Object {
          "paddingBottom": 50,
        }
      }
      data={
        Array [
          Object {
            "amount": 100000,
            "description": "Default money-in transaction",
            "sender": Object {
              "accountHolder": "Jane",
              "accountNo": "1111-111-1111",
            },
            "transactionDate": "2022-03-11T19:48:18.249Z",
            "transactionId": "622ba782f3aa395d71354900",
            "transactionType": "received",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      keyExtractor={[Function]}
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      showsVerticalScrollIndicator={false}
      stickyHeaderIndices={Array []}
      testID="transaction"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID="detail"
          >
            <View
              style={
                Object {
                  "backgroundColor": "#fff",
                  "borderColor": "#eaeaea",
                  "borderRadius": 20,
                  "borderWidth": 2,
                  "height": 100,
                  "marginVertical": 5,
                  "padding": 10,
                }
              }
            >
              <Text>
                3/12/2022, 2:48:18 AM
              </Text>
              <View
                style={
                  Array [
                    Object {
                      "flexDirection": "row",
                    },
                    Object {
                      "justifyContent": "space-between",
                    },
                  ]
                }
              >
                <View>
                  <Text>
                    Jane
                  </Text>
                  <Text>
                    1111-111-1111
                  </Text>
                </View>
                <View>
                  <Text
                    style={
                      Array [
                        Object {
                          "color": "#20cb9d",
                        },
                        Object {
                          "fontWeight": "bold",
                        },
                      ]
                    }
                  >
                    +SGD$
                    100,000.00
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "left": 0,
        "marginBottom": 20,
        "position": "absolute",
        "right": 0,
      }
    }
  >
    <View
      accessibilityState={
        Object {
          "disabled": false,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "black",
          "borderRadius": 50,
          "opacity": 1,
          "paddingHorizontal": 50,
          "paddingVertical": 10,
        }
      }
      testID="goToTransfer"
    >
      <Text
        style={
          Array [
            Object {
              "color": "#000",
              "fontSize": 20,
              "fontWeight": "bold",
            },
            Object {
              "color": "#fff",
            },
          ]
        }
      >
        Make Transfer
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "bottom": 0,
        "position": "absolute",
        "zIndex": -1,
      }
    }
  >
    <RNSVGSvgView
      bbHeight={500}
      bbWidth={750}
      focusable={false}
      height={500}
      style={
        Array [
          Object {
            "backgroundColor": "transparent",
            "borderWidth": 0,
          },
          Object {
            "flex": 0,
            "height": 500,
            "width": 750,
          },
        ]
      }
      width={750}
    >
      <RNSVGGroup>
        <RNSVGCircle
          cx={450}
          cy={800}
          fill={4278190208}
          propList={
            Array [
              "fill",
              "stroke",
              "strokeWidth",
            ]
          }
          r={500}
          stroke={4278190208}
          strokeWidth="2"
        />
      </RNSVGGroup>
    </RNSVGSvgView>
  </View>
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    testID="detailModal"
    transparent={true}
    visible={false}
  />
  <Modal
    animationType="none"
    deviceHeight={null}
    deviceWidth={null}
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onBackdropPress={[Function]}
    onModalHide={[Function]}
    onModalWillHide={[Function]}
    onModalWillShow={[Function]}
    onRequestClose={[Function]}
    panResponderThreshold={4}
    scrollHorizontal={false}
    scrollOffset={0}
    scrollOffsetMax={0}
    scrollTo={null}
    statusBarTranslucent={false}
    supportedOrientations={
      Array [
        "portrait",
        "landscape",
      ]
    }
    swipeThreshold={100}
    transparent={true}
    visible={false}
  />
</View>
`;
